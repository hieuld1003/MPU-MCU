
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002814  08002814  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002814  08002814  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002814  08002814  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800281c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000048  08002864  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002864  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009782  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7b  00000000  00000000  000297f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b1d  00000000  00000000  0002c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2ec  00000000  00000000  000430fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008261f  00000000  00000000  0004e3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0a08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  000d0a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	080027d8 	.word	0x080027d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	080027d8 	.word	0x080027d8

0800014c <fsm_for_input_processing>:

static int blink_status = 0;



void fsm_for_input_processing(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    //Initialize only once when run code
    static int is_initialized = 0;
    if (!is_initialized) {
 8000152:	4b9b      	ldr	r3, [pc, #620]	; (80003c0 <fsm_for_input_processing+0x274>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d135      	bne.n	80001c6 <fsm_for_input_processing+0x7a>
        status_h = H_RED;
 800015a:	4b9a      	ldr	r3, [pc, #616]	; (80003c4 <fsm_for_input_processing+0x278>)
 800015c:	220c      	movs	r2, #12
 800015e:	601a      	str	r2, [r3, #0]
        counter_h = time_red;
 8000160:	4b99      	ldr	r3, [pc, #612]	; (80003c8 <fsm_for_input_processing+0x27c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a99      	ldr	r2, [pc, #612]	; (80003cc <fsm_for_input_processing+0x280>)
 8000166:	6013      	str	r3, [r2, #0]
        set_red_h(1); set_yellow_h(0); set_green_h(0);
 8000168:	2001      	movs	r0, #1
 800016a:	f000 fd53 	bl	8000c14 <set_red_h>
 800016e:	2000      	movs	r0, #0
 8000170:	f000 fd66 	bl	8000c40 <set_yellow_h>
 8000174:	2000      	movs	r0, #0
 8000176:	f000 fd79 	bl	8000c6c <set_green_h>

        status_v = V_GREEN;
 800017a:	4b95      	ldr	r3, [pc, #596]	; (80003d0 <fsm_for_input_processing+0x284>)
 800017c:	2214      	movs	r2, #20
 800017e:	601a      	str	r2, [r3, #0]
        counter_v = time_green;
 8000180:	4b94      	ldr	r3, [pc, #592]	; (80003d4 <fsm_for_input_processing+0x288>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a94      	ldr	r2, [pc, #592]	; (80003d8 <fsm_for_input_processing+0x28c>)
 8000186:	6013      	str	r3, [r2, #0]
        set_red_v(0); set_yellow_v(0); set_green_v(1);
 8000188:	2000      	movs	r0, #0
 800018a:	f000 fd85 	bl	8000c98 <set_red_v>
 800018e:	2000      	movs	r0, #0
 8000190:	f000 fd98 	bl	8000cc4 <set_yellow_v>
 8000194:	2001      	movs	r0, #1
 8000196:	f000 fdab 	bl	8000cf0 <set_green_v>

        button0_flag = 1;
 800019a:	4b90      	ldr	r3, [pc, #576]	; (80003dc <fsm_for_input_processing+0x290>)
 800019c:	2201      	movs	r2, #1
 800019e:	601a      	str	r2, [r3, #0]
        button1_flag = 1;
 80001a0:	4b8f      	ldr	r3, [pc, #572]	; (80003e0 <fsm_for_input_processing+0x294>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	601a      	str	r2, [r3, #0]
        button2_flag = 1;
 80001a6:	4b8f      	ldr	r3, [pc, #572]	; (80003e4 <fsm_for_input_processing+0x298>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	601a      	str	r2, [r3, #0]

        setTimer_TrafficLight(1000);
 80001ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b0:	f000 ff46 	bl	8001040 <setTimer_TrafficLight>
        setTimer_7seg_scan(10);
 80001b4:	200a      	movs	r0, #10
 80001b6:	f000 ff5f 	bl	8001078 <setTimer_7seg_scan>
        setTimer_Blink(250);
 80001ba:	20fa      	movs	r0, #250	; 0xfa
 80001bc:	f000 ff78 	bl	80010b0 <setTimer_Blink>
        is_initialized = 1;
 80001c0:	4b7f      	ldr	r3, [pc, #508]	; (80003c0 <fsm_for_input_processing+0x274>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	601a      	str	r2, [r3, #0]
    }

    scan7SEG();
 80001c6:	f000 fc89 	bl	8000adc <scan7SEG>
    
    // Handle button sw0 cases
    if (is_button_pressed(0) && !button0_flag) {
 80001ca:	2000      	movs	r0, #0
 80001cc:	f000 fb94 	bl	80008f8 <is_button_pressed>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d05d      	beq.n	8000292 <fsm_for_input_processing+0x146>
 80001d6:	4b81      	ldr	r3, [pc, #516]	; (80003dc <fsm_for_input_processing+0x290>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d159      	bne.n	8000292 <fsm_for_input_processing+0x146>
        button0_flag = 1;
 80001de:	4b7f      	ldr	r3, [pc, #508]	; (80003dc <fsm_for_input_processing+0x290>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	601a      	str	r2, [r3, #0]
        prev_mode = mode; 
 80001e4:	4b80      	ldr	r3, [pc, #512]	; (80003e8 <fsm_for_input_processing+0x29c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a80      	ldr	r2, [pc, #512]	; (80003ec <fsm_for_input_processing+0x2a0>)
 80001ea:	6013      	str	r3, [r2, #0]
        mode = (mode % 4) + 1;
 80001ec:	4b7e      	ldr	r3, [pc, #504]	; (80003e8 <fsm_for_input_processing+0x29c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	425a      	negs	r2, r3
 80001f2:	f003 0303 	and.w	r3, r3, #3
 80001f6:	f002 0203 	and.w	r2, r2, #3
 80001fa:	bf58      	it	pl
 80001fc:	4253      	negpl	r3, r2
 80001fe:	3301      	adds	r3, #1
 8000200:	4a79      	ldr	r2, [pc, #484]	; (80003e8 <fsm_for_input_processing+0x29c>)
 8000202:	6013      	str	r3, [r2, #0]
        
        switch(mode) {
 8000204:	4b78      	ldr	r3, [pc, #480]	; (80003e8 <fsm_for_input_processing+0x29c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b04      	cmp	r3, #4
 800020a:	d010      	beq.n	800022e <fsm_for_input_processing+0xe2>
 800020c:	2b04      	cmp	r3, #4
 800020e:	dc13      	bgt.n	8000238 <fsm_for_input_processing+0xec>
 8000210:	2b02      	cmp	r3, #2
 8000212:	d002      	beq.n	800021a <fsm_for_input_processing+0xce>
 8000214:	2b03      	cmp	r3, #3
 8000216:	d005      	beq.n	8000224 <fsm_for_input_processing+0xd8>
 8000218:	e00e      	b.n	8000238 <fsm_for_input_processing+0xec>
            case MODIFY_RED_MODE:
                temp_value = time_red;
 800021a:	4b6b      	ldr	r3, [pc, #428]	; (80003c8 <fsm_for_input_processing+0x27c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a74      	ldr	r2, [pc, #464]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 8000220:	6013      	str	r3, [r2, #0]
                break;
 8000222:	e009      	b.n	8000238 <fsm_for_input_processing+0xec>
            case MODIFY_YELLOW_MODE:
                temp_value = time_yellow;
 8000224:	4b73      	ldr	r3, [pc, #460]	; (80003f4 <fsm_for_input_processing+0x2a8>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a71      	ldr	r2, [pc, #452]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 800022a:	6013      	str	r3, [r2, #0]
                break;
 800022c:	e004      	b.n	8000238 <fsm_for_input_processing+0xec>
            case MODIFY_GREEN_MODE:
                temp_value = time_green;
 800022e:	4b69      	ldr	r3, [pc, #420]	; (80003d4 <fsm_for_input_processing+0x288>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a6f      	ldr	r2, [pc, #444]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 8000234:	6013      	str	r3, [r2, #0]
                break;
 8000236:	bf00      	nop
        }
        
        if (prev_mode == MODIFY_GREEN_MODE && mode == NORMAL_MODE) {
 8000238:	4b6c      	ldr	r3, [pc, #432]	; (80003ec <fsm_for_input_processing+0x2a0>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b04      	cmp	r3, #4
 800023e:	d132      	bne.n	80002a6 <fsm_for_input_processing+0x15a>
 8000240:	4b69      	ldr	r3, [pc, #420]	; (80003e8 <fsm_for_input_processing+0x29c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d12e      	bne.n	80002a6 <fsm_for_input_processing+0x15a>
            status_h = H_RED;
 8000248:	4b5e      	ldr	r3, [pc, #376]	; (80003c4 <fsm_for_input_processing+0x278>)
 800024a:	220c      	movs	r2, #12
 800024c:	601a      	str	r2, [r3, #0]
            counter_h = time_red;
 800024e:	4b5e      	ldr	r3, [pc, #376]	; (80003c8 <fsm_for_input_processing+0x27c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a5e      	ldr	r2, [pc, #376]	; (80003cc <fsm_for_input_processing+0x280>)
 8000254:	6013      	str	r3, [r2, #0]
            set_red_h(1); set_yellow_h(0); set_green_h(0);
 8000256:	2001      	movs	r0, #1
 8000258:	f000 fcdc 	bl	8000c14 <set_red_h>
 800025c:	2000      	movs	r0, #0
 800025e:	f000 fcef 	bl	8000c40 <set_yellow_h>
 8000262:	2000      	movs	r0, #0
 8000264:	f000 fd02 	bl	8000c6c <set_green_h>

            status_v = V_GREEN;
 8000268:	4b59      	ldr	r3, [pc, #356]	; (80003d0 <fsm_for_input_processing+0x284>)
 800026a:	2214      	movs	r2, #20
 800026c:	601a      	str	r2, [r3, #0]
            counter_v = time_green;
 800026e:	4b59      	ldr	r3, [pc, #356]	; (80003d4 <fsm_for_input_processing+0x288>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a59      	ldr	r2, [pc, #356]	; (80003d8 <fsm_for_input_processing+0x28c>)
 8000274:	6013      	str	r3, [r2, #0]
            set_red_v(0); set_yellow_v(0); set_green_v(1);
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fd0e 	bl	8000c98 <set_red_v>
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fd21 	bl	8000cc4 <set_yellow_v>
 8000282:	2001      	movs	r0, #1
 8000284:	f000 fd34 	bl	8000cf0 <set_green_v>
            
            setTimer_TrafficLight(1000);
 8000288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028c:	f000 fed8 	bl	8001040 <setTimer_TrafficLight>
        if (prev_mode == MODIFY_GREEN_MODE && mode == NORMAL_MODE) {
 8000290:	e009      	b.n	80002a6 <fsm_for_input_processing+0x15a>
        }
    } else if (!is_button_pressed(0)) {
 8000292:	2000      	movs	r0, #0
 8000294:	f000 fb30 	bl	80008f8 <is_button_pressed>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d104      	bne.n	80002a8 <fsm_for_input_processing+0x15c>
        button0_flag = 0;
 800029e:	4b4f      	ldr	r3, [pc, #316]	; (80003dc <fsm_for_input_processing+0x290>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	e000      	b.n	80002a8 <fsm_for_input_processing+0x15c>
        if (prev_mode == MODIFY_GREEN_MODE && mode == NORMAL_MODE) {
 80002a6:	bf00      	nop
    }
    
    // Handle button sw1 cases
    if (is_button_pressed(1)) {
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fb25 	bl	80008f8 <is_button_pressed>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d03a      	beq.n	800032a <fsm_for_input_processing+0x1de>
        if (!button1_flag) {
 80002b4:	4b4a      	ldr	r3, [pc, #296]	; (80003e0 <fsm_for_input_processing+0x294>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d112      	bne.n	80002e2 <fsm_for_input_processing+0x196>
            button1_flag = 1;
 80002bc:	4b48      	ldr	r3, [pc, #288]	; (80003e0 <fsm_for_input_processing+0x294>)
 80002be:	2201      	movs	r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
            
            if (mode != NORMAL_MODE) {
 80002c2:	4b49      	ldr	r3, [pc, #292]	; (80003e8 <fsm_for_input_processing+0x29c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d00b      	beq.n	80002e2 <fsm_for_input_processing+0x196>
                temp_value++;
 80002ca:	4b49      	ldr	r3, [pc, #292]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	4a47      	ldr	r2, [pc, #284]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 80002d2:	6013      	str	r3, [r2, #0]
                if (temp_value > 99) temp_value = 1;
 80002d4:	4b46      	ldr	r3, [pc, #280]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b63      	cmp	r3, #99	; 0x63
 80002da:	dd02      	ble.n	80002e2 <fsm_for_input_processing+0x196>
 80002dc:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 80002de:	2201      	movs	r2, #1
 80002e0:	601a      	str	r2, [r3, #0]
            }
        }
        
        if (is_button_pressed_1s(1)) {
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fb22 	bl	800092c <is_button_pressed_1s>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d023      	beq.n	8000336 <fsm_for_input_processing+0x1ea>
            auto_increase_counter++;
 80002ee:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <fsm_for_input_processing+0x2ac>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3301      	adds	r3, #1
 80002f4:	4a40      	ldr	r2, [pc, #256]	; (80003f8 <fsm_for_input_processing+0x2ac>)
 80002f6:	6013      	str	r3, [r2, #0]
            if (auto_increase_counter >= 1000) { //set time hold here
 80002f8:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <fsm_for_input_processing+0x2ac>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000300:	db19      	blt.n	8000336 <fsm_for_input_processing+0x1ea>
                auto_increase_counter = 0;
 8000302:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <fsm_for_input_processing+0x2ac>)
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
                if (mode != NORMAL_MODE) {
 8000308:	4b37      	ldr	r3, [pc, #220]	; (80003e8 <fsm_for_input_processing+0x29c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d012      	beq.n	8000336 <fsm_for_input_processing+0x1ea>
                    temp_value++;
 8000310:	4b37      	ldr	r3, [pc, #220]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	4a36      	ldr	r2, [pc, #216]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 8000318:	6013      	str	r3, [r2, #0]
                    if (temp_value > 99) temp_value = 1;
 800031a:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b63      	cmp	r3, #99	; 0x63
 8000320:	dd09      	ble.n	8000336 <fsm_for_input_processing+0x1ea>
 8000322:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 8000324:	2201      	movs	r2, #1
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e005      	b.n	8000336 <fsm_for_input_processing+0x1ea>
                }
            }
        }
    } else {
        button1_flag = 0;
 800032a:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <fsm_for_input_processing+0x294>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
        auto_increase_counter = 0; 
 8000330:	4b31      	ldr	r3, [pc, #196]	; (80003f8 <fsm_for_input_processing+0x2ac>)
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
    }
    
    // Handle button sw2 cases
    if (is_button_pressed(2) && !button2_flag) {
 8000336:	2002      	movs	r0, #2
 8000338:	f000 fade 	bl	80008f8 <is_button_pressed>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	f000 80aa 	beq.w	8000498 <fsm_for_input_processing+0x34c>
 8000344:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <fsm_for_input_processing+0x298>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	f040 80a5 	bne.w	8000498 <fsm_for_input_processing+0x34c>
        button2_flag = 1;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <fsm_for_input_processing+0x298>)
 8000350:	2201      	movs	r2, #1
 8000352:	601a      	str	r2, [r3, #0]
        
        if (mode != NORMAL_MODE) {
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <fsm_for_input_processing+0x29c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	f000 8095 	beq.w	8000488 <fsm_for_input_processing+0x33c>
            switch(mode) {
 800035e:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <fsm_for_input_processing+0x29c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b04      	cmp	r3, #4
 8000364:	d06d      	beq.n	8000442 <fsm_for_input_processing+0x2f6>
 8000366:	2b04      	cmp	r3, #4
 8000368:	f300 80a0 	bgt.w	80004ac <fsm_for_input_processing+0x360>
 800036c:	2b02      	cmp	r3, #2
 800036e:	d002      	beq.n	8000376 <fsm_for_input_processing+0x22a>
 8000370:	2b03      	cmp	r3, #3
 8000372:	d043      	beq.n	80003fc <fsm_for_input_processing+0x2b0>
        if (mode != NORMAL_MODE) {
 8000374:	e09a      	b.n	80004ac <fsm_for_input_processing+0x360>
                case MODIFY_RED_MODE:
                    time_red = temp_value;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <fsm_for_input_processing+0x2a4>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <fsm_for_input_processing+0x27c>)
 800037c:	6013      	str	r3, [r2, #0]
                    if (time_green + time_yellow != time_red) {
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <fsm_for_input_processing+0x288>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <fsm_for_input_processing+0x2a8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	441a      	add	r2, r3
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <fsm_for_input_processing+0x27c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	429a      	cmp	r2, r3
 800038e:	d07d      	beq.n	800048c <fsm_for_input_processing+0x340>
                        int diff = time_red - time_yellow;
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <fsm_for_input_processing+0x27c>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <fsm_for_input_processing+0x2a8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	1ad3      	subs	r3, r2, r3
 800039a:	607b      	str	r3, [r7, #4]
                        
                        if (diff > 1) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	dd03      	ble.n	80003aa <fsm_for_input_processing+0x25e>
                            time_green = diff;
 80003a2:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <fsm_for_input_processing+0x288>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6013      	str	r3, [r2, #0]
                        } else {
                            time_green = 1;
                            time_yellow = time_red - time_green;
                        }
                    }
                    break;
 80003a8:	e070      	b.n	800048c <fsm_for_input_processing+0x340>
                            time_green = 1;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <fsm_for_input_processing+0x288>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
                            time_yellow = time_red - time_green;
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <fsm_for_input_processing+0x27c>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <fsm_for_input_processing+0x288>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <fsm_for_input_processing+0x2a8>)
 80003bc:	6013      	str	r3, [r2, #0]
                    break;
 80003be:	e065      	b.n	800048c <fsm_for_input_processing+0x340>
 80003c0:	20000084 	.word	0x20000084
 80003c4:	20000014 	.word	0x20000014
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000068 	.word	0x20000068
 80003d0:	20000018 	.word	0x20000018
 80003d4:	20000008 	.word	0x20000008
 80003d8:	2000006c 	.word	0x2000006c
 80003dc:	20000070 	.word	0x20000070
 80003e0:	20000074 	.word	0x20000074
 80003e4:	20000078 	.word	0x20000078
 80003e8:	2000000c 	.word	0x2000000c
 80003ec:	20000010 	.word	0x20000010
 80003f0:	20000064 	.word	0x20000064
 80003f4:	20000004 	.word	0x20000004
 80003f8:	2000007c 	.word	0x2000007c
                    
                case MODIFY_YELLOW_MODE:
                    time_yellow = temp_value;
 80003fc:	4b88      	ldr	r3, [pc, #544]	; (8000620 <fsm_for_input_processing+0x4d4>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a88      	ldr	r2, [pc, #544]	; (8000624 <fsm_for_input_processing+0x4d8>)
 8000402:	6013      	str	r3, [r2, #0]
                    if (time_green + time_yellow != time_red) {
 8000404:	4b88      	ldr	r3, [pc, #544]	; (8000628 <fsm_for_input_processing+0x4dc>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b86      	ldr	r3, [pc, #536]	; (8000624 <fsm_for_input_processing+0x4d8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	441a      	add	r2, r3
 800040e:	4b87      	ldr	r3, [pc, #540]	; (800062c <fsm_for_input_processing+0x4e0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	429a      	cmp	r2, r3
 8000414:	d03c      	beq.n	8000490 <fsm_for_input_processing+0x344>
                        time_green = time_red - time_yellow;
 8000416:	4b85      	ldr	r3, [pc, #532]	; (800062c <fsm_for_input_processing+0x4e0>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	4b82      	ldr	r3, [pc, #520]	; (8000624 <fsm_for_input_processing+0x4d8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	1ad3      	subs	r3, r2, r3
 8000420:	4a81      	ldr	r2, [pc, #516]	; (8000628 <fsm_for_input_processing+0x4dc>)
 8000422:	6013      	str	r3, [r2, #0]
                        if (time_green < 1) {
 8000424:	4b80      	ldr	r3, [pc, #512]	; (8000628 <fsm_for_input_processing+0x4dc>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	dc31      	bgt.n	8000490 <fsm_for_input_processing+0x344>
                            time_green = 1;
 800042c:	4b7e      	ldr	r3, [pc, #504]	; (8000628 <fsm_for_input_processing+0x4dc>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
                            time_red = time_green + time_yellow; 
 8000432:	4b7d      	ldr	r3, [pc, #500]	; (8000628 <fsm_for_input_processing+0x4dc>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	4b7b      	ldr	r3, [pc, #492]	; (8000624 <fsm_for_input_processing+0x4d8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4413      	add	r3, r2
 800043c:	4a7b      	ldr	r2, [pc, #492]	; (800062c <fsm_for_input_processing+0x4e0>)
 800043e:	6013      	str	r3, [r2, #0]
                        }
                    }
                    break;
 8000440:	e026      	b.n	8000490 <fsm_for_input_processing+0x344>
                    
                case MODIFY_GREEN_MODE:
                    time_green = temp_value;
 8000442:	4b77      	ldr	r3, [pc, #476]	; (8000620 <fsm_for_input_processing+0x4d4>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a78      	ldr	r2, [pc, #480]	; (8000628 <fsm_for_input_processing+0x4dc>)
 8000448:	6013      	str	r3, [r2, #0]
                    if (time_green + time_yellow != time_red) {
 800044a:	4b77      	ldr	r3, [pc, #476]	; (8000628 <fsm_for_input_processing+0x4dc>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b75      	ldr	r3, [pc, #468]	; (8000624 <fsm_for_input_processing+0x4d8>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	441a      	add	r2, r3
 8000454:	4b75      	ldr	r3, [pc, #468]	; (800062c <fsm_for_input_processing+0x4e0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	429a      	cmp	r2, r3
 800045a:	d01b      	beq.n	8000494 <fsm_for_input_processing+0x348>
                        time_yellow = time_red - time_green;
 800045c:	4b73      	ldr	r3, [pc, #460]	; (800062c <fsm_for_input_processing+0x4e0>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4b71      	ldr	r3, [pc, #452]	; (8000628 <fsm_for_input_processing+0x4dc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	4a6f      	ldr	r2, [pc, #444]	; (8000624 <fsm_for_input_processing+0x4d8>)
 8000468:	6013      	str	r3, [r2, #0]
                        if (time_yellow < 1) {
 800046a:	4b6e      	ldr	r3, [pc, #440]	; (8000624 <fsm_for_input_processing+0x4d8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	dc10      	bgt.n	8000494 <fsm_for_input_processing+0x348>
                            time_yellow = 1;
 8000472:	4b6c      	ldr	r3, [pc, #432]	; (8000624 <fsm_for_input_processing+0x4d8>)
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
                            time_red = time_green + time_yellow;
 8000478:	4b6b      	ldr	r3, [pc, #428]	; (8000628 <fsm_for_input_processing+0x4dc>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b69      	ldr	r3, [pc, #420]	; (8000624 <fsm_for_input_processing+0x4d8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4413      	add	r3, r2
 8000482:	4a6a      	ldr	r2, [pc, #424]	; (800062c <fsm_for_input_processing+0x4e0>)
 8000484:	6013      	str	r3, [r2, #0]
                        }
                    }
                    break;
 8000486:	e005      	b.n	8000494 <fsm_for_input_processing+0x348>
            }
        }
 8000488:	bf00      	nop
 800048a:	e00f      	b.n	80004ac <fsm_for_input_processing+0x360>
                    break;
 800048c:	bf00      	nop
 800048e:	e00d      	b.n	80004ac <fsm_for_input_processing+0x360>
                    break;
 8000490:	bf00      	nop
 8000492:	e00b      	b.n	80004ac <fsm_for_input_processing+0x360>
                    break;
 8000494:	bf00      	nop
        if (mode != NORMAL_MODE) {
 8000496:	e009      	b.n	80004ac <fsm_for_input_processing+0x360>
    } else if (!is_button_pressed(2)) {
 8000498:	2002      	movs	r0, #2
 800049a:	f000 fa2d 	bl	80008f8 <is_button_pressed>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d104      	bne.n	80004ae <fsm_for_input_processing+0x362>
        button2_flag = 0;
 80004a4:	4b62      	ldr	r3, [pc, #392]	; (8000630 <fsm_for_input_processing+0x4e4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	e000      	b.n	80004ae <fsm_for_input_processing+0x362>
        if (mode != NORMAL_MODE) {
 80004ac:	bf00      	nop
    }
    

    // Main FSM logic
    switch(mode) {
 80004ae:	4b61      	ldr	r3, [pc, #388]	; (8000634 <fsm_for_input_processing+0x4e8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	f200 819a 	bhi.w	80007ee <fsm_for_input_processing+0x6a2>
 80004ba:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <fsm_for_input_processing+0x374>)
 80004bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c0:	080004d1 	.word	0x080004d1
 80004c4:	0800064d 	.word	0x0800064d
 80004c8:	080006d5 	.word	0x080006d5
 80004cc:	0800075b 	.word	0x0800075b
        case NORMAL_MODE:
            updateLedBuffer(counter_h, counter_v);
 80004d0:	4b59      	ldr	r3, [pc, #356]	; (8000638 <fsm_for_input_processing+0x4ec>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a59      	ldr	r2, [pc, #356]	; (800063c <fsm_for_input_processing+0x4f0>)
 80004d6:	6812      	ldr	r2, [r2, #0]
 80004d8:	4611      	mov	r1, r2
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fb5e 	bl	8000b9c <updateLedBuffer>

            if (timer_traffic_light_flag == 1) {
 80004e0:	4b57      	ldr	r3, [pc, #348]	; (8000640 <fsm_for_input_processing+0x4f4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d10d      	bne.n	8000504 <fsm_for_input_processing+0x3b8>
                setTimer_TrafficLight(500); // set traffic light timer here
 80004e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ec:	f000 fda8 	bl	8001040 <setTimer_TrafficLight>
                counter_h--;
 80004f0:	4b51      	ldr	r3, [pc, #324]	; (8000638 <fsm_for_input_processing+0x4ec>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	4a50      	ldr	r2, [pc, #320]	; (8000638 <fsm_for_input_processing+0x4ec>)
 80004f8:	6013      	str	r3, [r2, #0]
                counter_v--;
 80004fa:	4b50      	ldr	r3, [pc, #320]	; (800063c <fsm_for_input_processing+0x4f0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	3b01      	subs	r3, #1
 8000500:	4a4e      	ldr	r2, [pc, #312]	; (800063c <fsm_for_input_processing+0x4f0>)
 8000502:	6013      	str	r3, [r2, #0]
            }

            switch(status_h) {
 8000504:	4b4f      	ldr	r3, [pc, #316]	; (8000644 <fsm_for_input_processing+0x4f8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b0c      	cmp	r3, #12
 800050a:	d006      	beq.n	800051a <fsm_for_input_processing+0x3ce>
 800050c:	2b0c      	cmp	r3, #12
 800050e:	dc3f      	bgt.n	8000590 <fsm_for_input_processing+0x444>
 8000510:	2b0a      	cmp	r3, #10
 8000512:	d014      	beq.n	800053e <fsm_for_input_processing+0x3f2>
 8000514:	2b0b      	cmp	r3, #11
 8000516:	d024      	beq.n	8000562 <fsm_for_input_processing+0x416>
 8000518:	e03a      	b.n	8000590 <fsm_for_input_processing+0x444>
                case H_RED:
                    if (counter_h <= 0) {
 800051a:	4b47      	ldr	r3, [pc, #284]	; (8000638 <fsm_for_input_processing+0x4ec>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	dc31      	bgt.n	8000586 <fsm_for_input_processing+0x43a>
                        status_h = H_GREEN;
 8000522:	4b48      	ldr	r3, [pc, #288]	; (8000644 <fsm_for_input_processing+0x4f8>)
 8000524:	220a      	movs	r2, #10
 8000526:	601a      	str	r2, [r3, #0]
                        counter_h = time_green;
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <fsm_for_input_processing+0x4dc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a42      	ldr	r2, [pc, #264]	; (8000638 <fsm_for_input_processing+0x4ec>)
 800052e:	6013      	str	r3, [r2, #0]
                        set_red_h(0); set_green_h(1);
 8000530:	2000      	movs	r0, #0
 8000532:	f000 fb6f 	bl	8000c14 <set_red_h>
 8000536:	2001      	movs	r0, #1
 8000538:	f000 fb98 	bl	8000c6c <set_green_h>
                    }
                    break;
 800053c:	e023      	b.n	8000586 <fsm_for_input_processing+0x43a>
                case H_GREEN:
                    if (counter_h <= 0) {
 800053e:	4b3e      	ldr	r3, [pc, #248]	; (8000638 <fsm_for_input_processing+0x4ec>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	dc21      	bgt.n	800058a <fsm_for_input_processing+0x43e>
                        status_h = H_YELLOW;
 8000546:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <fsm_for_input_processing+0x4f8>)
 8000548:	220b      	movs	r2, #11
 800054a:	601a      	str	r2, [r3, #0]
                        counter_h = time_yellow;
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <fsm_for_input_processing+0x4d8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a39      	ldr	r2, [pc, #228]	; (8000638 <fsm_for_input_processing+0x4ec>)
 8000552:	6013      	str	r3, [r2, #0]
                        set_green_h(0); set_yellow_h(1);
 8000554:	2000      	movs	r0, #0
 8000556:	f000 fb89 	bl	8000c6c <set_green_h>
 800055a:	2001      	movs	r0, #1
 800055c:	f000 fb70 	bl	8000c40 <set_yellow_h>
                    }
                    break;
 8000560:	e013      	b.n	800058a <fsm_for_input_processing+0x43e>
                case H_YELLOW:
                    if (counter_h <= 0) {
 8000562:	4b35      	ldr	r3, [pc, #212]	; (8000638 <fsm_for_input_processing+0x4ec>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	dc11      	bgt.n	800058e <fsm_for_input_processing+0x442>
                        status_h = H_RED;
 800056a:	4b36      	ldr	r3, [pc, #216]	; (8000644 <fsm_for_input_processing+0x4f8>)
 800056c:	220c      	movs	r2, #12
 800056e:	601a      	str	r2, [r3, #0]
                        counter_h = time_red;
 8000570:	4b2e      	ldr	r3, [pc, #184]	; (800062c <fsm_for_input_processing+0x4e0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a30      	ldr	r2, [pc, #192]	; (8000638 <fsm_for_input_processing+0x4ec>)
 8000576:	6013      	str	r3, [r2, #0]
                        set_yellow_h(0); set_red_h(1);
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fb61 	bl	8000c40 <set_yellow_h>
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fb48 	bl	8000c14 <set_red_h>
                    }
                    break;
 8000584:	e003      	b.n	800058e <fsm_for_input_processing+0x442>
                    break;
 8000586:	bf00      	nop
 8000588:	e002      	b.n	8000590 <fsm_for_input_processing+0x444>
                    break;
 800058a:	bf00      	nop
 800058c:	e000      	b.n	8000590 <fsm_for_input_processing+0x444>
                    break;
 800058e:	bf00      	nop
            }

            switch(status_v) {
 8000590:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <fsm_for_input_processing+0x4fc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b16      	cmp	r3, #22
 8000596:	d007      	beq.n	80005a8 <fsm_for_input_processing+0x45c>
 8000598:	2b16      	cmp	r3, #22
 800059a:	f300 8121 	bgt.w	80007e0 <fsm_for_input_processing+0x694>
 800059e:	2b14      	cmp	r3, #20
 80005a0:	d014      	beq.n	80005cc <fsm_for_input_processing+0x480>
 80005a2:	2b15      	cmp	r3, #21
 80005a4:	d024      	beq.n	80005f0 <fsm_for_input_processing+0x4a4>
                        counter_v = time_red;
                        set_yellow_v(0); set_red_v(1);
                    }
                    break;
            }
            break;
 80005a6:	e11b      	b.n	80007e0 <fsm_for_input_processing+0x694>
                    if (counter_v <= 0) {
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <fsm_for_input_processing+0x4f0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	dc31      	bgt.n	8000614 <fsm_for_input_processing+0x4c8>
                        status_v = V_GREEN;
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <fsm_for_input_processing+0x4fc>)
 80005b2:	2214      	movs	r2, #20
 80005b4:	601a      	str	r2, [r3, #0]
                        counter_v = time_green;
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <fsm_for_input_processing+0x4dc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a20      	ldr	r2, [pc, #128]	; (800063c <fsm_for_input_processing+0x4f0>)
 80005bc:	6013      	str	r3, [r2, #0]
                        set_red_v(0); set_green_v(1);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fb6a 	bl	8000c98 <set_red_v>
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fb93 	bl	8000cf0 <set_green_v>
                    break;
 80005ca:	e023      	b.n	8000614 <fsm_for_input_processing+0x4c8>
                    if (counter_v <= 0) {
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <fsm_for_input_processing+0x4f0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	dc21      	bgt.n	8000618 <fsm_for_input_processing+0x4cc>
                        status_v = V_YELLOW;
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <fsm_for_input_processing+0x4fc>)
 80005d6:	2215      	movs	r2, #21
 80005d8:	601a      	str	r2, [r3, #0]
                        counter_v = time_yellow;
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <fsm_for_input_processing+0x4d8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <fsm_for_input_processing+0x4f0>)
 80005e0:	6013      	str	r3, [r2, #0]
                        set_green_v(0); set_yellow_v(1);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fb84 	bl	8000cf0 <set_green_v>
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fb6b 	bl	8000cc4 <set_yellow_v>
                    break;
 80005ee:	e013      	b.n	8000618 <fsm_for_input_processing+0x4cc>
                    if (counter_v <= 0) {
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <fsm_for_input_processing+0x4f0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dc11      	bgt.n	800061c <fsm_for_input_processing+0x4d0>
                        status_v = V_RED;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <fsm_for_input_processing+0x4fc>)
 80005fa:	2216      	movs	r2, #22
 80005fc:	601a      	str	r2, [r3, #0]
                        counter_v = time_red;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <fsm_for_input_processing+0x4e0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <fsm_for_input_processing+0x4f0>)
 8000604:	6013      	str	r3, [r2, #0]
                        set_yellow_v(0); set_red_v(1);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fb5c 	bl	8000cc4 <set_yellow_v>
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fb43 	bl	8000c98 <set_red_v>
                    break;
 8000612:	e003      	b.n	800061c <fsm_for_input_processing+0x4d0>
                    break;
 8000614:	bf00      	nop
 8000616:	e0e3      	b.n	80007e0 <fsm_for_input_processing+0x694>
                    break;
 8000618:	bf00      	nop
 800061a:	e0e1      	b.n	80007e0 <fsm_for_input_processing+0x694>
                    break;
 800061c:	bf00      	nop
            break;
 800061e:	e0df      	b.n	80007e0 <fsm_for_input_processing+0x694>
 8000620:	20000064 	.word	0x20000064
 8000624:	20000004 	.word	0x20000004
 8000628:	20000008 	.word	0x20000008
 800062c:	20000000 	.word	0x20000000
 8000630:	20000078 	.word	0x20000078
 8000634:	2000000c 	.word	0x2000000c
 8000638:	20000068 	.word	0x20000068
 800063c:	2000006c 	.word	0x2000006c
 8000640:	200000b8 	.word	0x200000b8
 8000644:	20000014 	.word	0x20000014
 8000648:	20000018 	.word	0x20000018
            
        case MODIFY_RED_MODE:
            led_buffer[2] = 0;
 800064c:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
            led_buffer[3] = 2;
 8000652:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 8000654:	2202      	movs	r2, #2
 8000656:	60da      	str	r2, [r3, #12]
            led_buffer[0] = temp_value / 10;
 8000658:	4b68      	ldr	r3, [pc, #416]	; (80007fc <fsm_for_input_processing+0x6b0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a68      	ldr	r2, [pc, #416]	; (8000800 <fsm_for_input_processing+0x6b4>)
 800065e:	fb82 1203 	smull	r1, r2, r2, r3
 8000662:	1092      	asrs	r2, r2, #2
 8000664:	17db      	asrs	r3, r3, #31
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	4a63      	ldr	r2, [pc, #396]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 800066a:	6013      	str	r3, [r2, #0]
            led_buffer[1] = temp_value % 10;
 800066c:	4b63      	ldr	r3, [pc, #396]	; (80007fc <fsm_for_input_processing+0x6b0>)
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	4b63      	ldr	r3, [pc, #396]	; (8000800 <fsm_for_input_processing+0x6b4>)
 8000672:	fb83 2301 	smull	r2, r3, r3, r1
 8000676:	109a      	asrs	r2, r3, #2
 8000678:	17cb      	asrs	r3, r1, #31
 800067a:	1ad2      	subs	r2, r2, r3
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	1aca      	subs	r2, r1, r3
 8000686:	4b5c      	ldr	r3, [pc, #368]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 8000688:	605a      	str	r2, [r3, #4]
            
            if (timer_blink_flag == 1) {
 800068a:	4b5e      	ldr	r3, [pc, #376]	; (8000804 <fsm_for_input_processing+0x6b8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	f040 80a8 	bne.w	80007e4 <fsm_for_input_processing+0x698>
                setTimer_Blink(250); 
 8000694:	20fa      	movs	r0, #250	; 0xfa
 8000696:	f000 fd0b 	bl	80010b0 <setTimer_Blink>
                blink_status = 1 - blink_status;
 800069a:	4b5b      	ldr	r3, [pc, #364]	; (8000808 <fsm_for_input_processing+0x6bc>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f1c3 0301 	rsb	r3, r3, #1
 80006a2:	4a59      	ldr	r2, [pc, #356]	; (8000808 <fsm_for_input_processing+0x6bc>)
 80006a4:	6013      	str	r3, [r2, #0]
                
                set_red_h(blink_status);
 80006a6:	4b58      	ldr	r3, [pc, #352]	; (8000808 <fsm_for_input_processing+0x6bc>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fab2 	bl	8000c14 <set_red_h>
                set_red_v(blink_status);
 80006b0:	4b55      	ldr	r3, [pc, #340]	; (8000808 <fsm_for_input_processing+0x6bc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 faef 	bl	8000c98 <set_red_v>
                set_yellow_h(0);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 fac0 	bl	8000c40 <set_yellow_h>
                set_yellow_v(0);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 faff 	bl	8000cc4 <set_yellow_v>
                set_green_h(0);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 fad0 	bl	8000c6c <set_green_h>
                set_green_v(0);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 fb0f 	bl	8000cf0 <set_green_v>
            }
            break;
 80006d2:	e087      	b.n	80007e4 <fsm_for_input_processing+0x698>
            
        case MODIFY_YELLOW_MODE:
            led_buffer[2] = 0;
 80006d4:	4b48      	ldr	r3, [pc, #288]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
            led_buffer[3] = 3;
 80006da:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 80006dc:	2203      	movs	r2, #3
 80006de:	60da      	str	r2, [r3, #12]
            led_buffer[0] = temp_value / 10;
 80006e0:	4b46      	ldr	r3, [pc, #280]	; (80007fc <fsm_for_input_processing+0x6b0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a46      	ldr	r2, [pc, #280]	; (8000800 <fsm_for_input_processing+0x6b4>)
 80006e6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ea:	1092      	asrs	r2, r2, #2
 80006ec:	17db      	asrs	r3, r3, #31
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	4a41      	ldr	r2, [pc, #260]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 80006f2:	6013      	str	r3, [r2, #0]
            led_buffer[1] = temp_value % 10;
 80006f4:	4b41      	ldr	r3, [pc, #260]	; (80007fc <fsm_for_input_processing+0x6b0>)
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	4b41      	ldr	r3, [pc, #260]	; (8000800 <fsm_for_input_processing+0x6b4>)
 80006fa:	fb83 2301 	smull	r2, r3, r3, r1
 80006fe:	109a      	asrs	r2, r3, #2
 8000700:	17cb      	asrs	r3, r1, #31
 8000702:	1ad2      	subs	r2, r2, r3
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	1aca      	subs	r2, r1, r3
 800070e:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 8000710:	605a      	str	r2, [r3, #4]
            
            if (timer_blink_flag == 1) {
 8000712:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <fsm_for_input_processing+0x6b8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d166      	bne.n	80007e8 <fsm_for_input_processing+0x69c>
                setTimer_Blink(250);
 800071a:	20fa      	movs	r0, #250	; 0xfa
 800071c:	f000 fcc8 	bl	80010b0 <setTimer_Blink>
                blink_status = 1 - blink_status;
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <fsm_for_input_processing+0x6bc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f1c3 0301 	rsb	r3, r3, #1
 8000728:	4a37      	ldr	r2, [pc, #220]	; (8000808 <fsm_for_input_processing+0x6bc>)
 800072a:	6013      	str	r3, [r2, #0]
                
                set_red_h(0);
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fa71 	bl	8000c14 <set_red_h>
                set_red_v(0);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fab0 	bl	8000c98 <set_red_v>
                set_yellow_h(blink_status);
 8000738:	4b33      	ldr	r3, [pc, #204]	; (8000808 <fsm_for_input_processing+0x6bc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fa7f 	bl	8000c40 <set_yellow_h>
                set_yellow_v(blink_status);
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <fsm_for_input_processing+0x6bc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fabc 	bl	8000cc4 <set_yellow_v>
                set_green_h(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fa8d 	bl	8000c6c <set_green_h>
                set_green_v(0);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 facc 	bl	8000cf0 <set_green_v>
            }
            break;
 8000758:	e046      	b.n	80007e8 <fsm_for_input_processing+0x69c>
            
        case MODIFY_GREEN_MODE:
            led_buffer[2] = 0;
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
            led_buffer[3] = 4;
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 8000762:	2204      	movs	r2, #4
 8000764:	60da      	str	r2, [r3, #12]
            led_buffer[0] = temp_value / 10;
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <fsm_for_input_processing+0x6b0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <fsm_for_input_processing+0x6b4>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	1092      	asrs	r2, r2, #2
 8000772:	17db      	asrs	r3, r3, #31
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 8000778:	6013      	str	r3, [r2, #0]
            led_buffer[1] = temp_value % 10;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <fsm_for_input_processing+0x6b0>)
 800077c:	6819      	ldr	r1, [r3, #0]
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <fsm_for_input_processing+0x6b4>)
 8000780:	fb83 2301 	smull	r2, r3, r3, r1
 8000784:	109a      	asrs	r2, r3, #2
 8000786:	17cb      	asrs	r3, r1, #31
 8000788:	1ad2      	subs	r2, r2, r3
 800078a:	4613      	mov	r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	1aca      	subs	r2, r1, r3
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <fsm_for_input_processing+0x6ac>)
 8000796:	605a      	str	r2, [r3, #4]
            
            if (timer_blink_flag == 1) {
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <fsm_for_input_processing+0x6b8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d125      	bne.n	80007ec <fsm_for_input_processing+0x6a0>
                setTimer_Blink(250);
 80007a0:	20fa      	movs	r0, #250	; 0xfa
 80007a2:	f000 fc85 	bl	80010b0 <setTimer_Blink>
                blink_status = 1 - blink_status;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <fsm_for_input_processing+0x6bc>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f1c3 0301 	rsb	r3, r3, #1
 80007ae:	4a16      	ldr	r2, [pc, #88]	; (8000808 <fsm_for_input_processing+0x6bc>)
 80007b0:	6013      	str	r3, [r2, #0]
                
                set_red_h(0);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 fa2e 	bl	8000c14 <set_red_h>
                set_red_v(0);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fa6d 	bl	8000c98 <set_red_v>
                set_yellow_h(0);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fa3e 	bl	8000c40 <set_yellow_h>
                set_yellow_v(0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 fa7d 	bl	8000cc4 <set_yellow_v>
                set_green_h(blink_status);
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <fsm_for_input_processing+0x6bc>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fa4c 	bl	8000c6c <set_green_h>
                set_green_v(blink_status);
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <fsm_for_input_processing+0x6bc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fa89 	bl	8000cf0 <set_green_v>
            }
            break;
 80007de:	e005      	b.n	80007ec <fsm_for_input_processing+0x6a0>
            break;
 80007e0:	bf00      	nop
 80007e2:	e004      	b.n	80007ee <fsm_for_input_processing+0x6a2>
            break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <fsm_for_input_processing+0x6a2>
            break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <fsm_for_input_processing+0x6a2>
            break;
 80007ec:	bf00      	nop
    }
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000a0 	.word	0x200000a0
 80007fc:	20000064 	.word	0x20000064
 8000800:	66666667 	.word	0x66666667
 8000804:	200000c8 	.word	0x200000c8
 8000808:	20000080 	.word	0x20000080

0800080c <button_reading>:

// Mảng lưu trữ Port và Pin cho từng nút
static GPIO_TypeDef* button_ports[NO_OF_BUTTONS] = {sw0_GPIO_Port, sw1_GPIO_Port, sw2_GPIO_Port};
static uint16_t button_pins[NO_OF_BUTTONS] = {sw0_Pin, sw1_Pin, sw2_Pin};

void button_reading(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
    for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	e058      	b.n	80008ca <button_reading+0xbe>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000818:	4a30      	ldr	r2, [pc, #192]	; (80008dc <button_reading+0xd0>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	7819      	ldrb	r1, [r3, #0]
 8000820:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <button_reading+0xd4>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	460a      	mov	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]
        debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 800082a:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <button_reading+0xd8>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000832:	492d      	ldr	r1, [pc, #180]	; (80008e8 <button_reading+0xdc>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800083a:	4619      	mov	r1, r3
 800083c:	4610      	mov	r0, r2
 800083e:	f000 ffb7 	bl	80017b0 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	4619      	mov	r1, r3
 8000846:	4a25      	ldr	r2, [pc, #148]	; (80008dc <button_reading+0xd0>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	460a      	mov	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]
        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <button_reading+0xd0>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	4921      	ldr	r1, [pc, #132]	; (80008e0 <button_reading+0xd4>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	440b      	add	r3, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	429a      	cmp	r2, r3
 8000862:	d108      	bne.n	8000876 <button_reading+0x6a>
        buttonBuffer[i] = debounceButtonBuffer1[i];
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <button_reading+0xd0>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	7819      	ldrb	r1, [r3, #0]
 800086c:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <button_reading+0xe0>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	460a      	mov	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]

        if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000876:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <button_reading+0xe0>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d116      	bne.n	80008b0 <button_reading+0xa4>
            if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000882:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <button_reading+0xe4>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088a:	2b63      	cmp	r3, #99	; 0x63
 800088c:	d80a      	bhi.n	80008a4 <button_reading+0x98>
                counterForButtonPress1s[i]++;
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <button_reading+0xe4>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000896:	3301      	adds	r3, #1
 8000898:	b299      	uxth	r1, r3
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <button_reading+0xe4>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008a2:	e00f      	b.n	80008c4 <button_reading+0xb8>
            } else {
                flagForButtonPress1s[i] = 1;
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <button_reading+0xe8>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e009      	b.n	80008c4 <button_reading+0xb8>
            }
        } else {
            counterForButtonPress1s[i] = 0;
 80008b0:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <button_reading+0xe4>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2100      	movs	r1, #0
 80008b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            flagForButtonPress1s[i] = 0;
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <button_reading+0xe8>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NO_OF_BUTTONS; i++) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	dda3      	ble.n	8000818 <button_reading+0xc>
        }
    }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	20000090 	.word	0x20000090
 80008e4:	2000001c 	.word	0x2000001c
 80008e8:	20000028 	.word	0x20000028
 80008ec:	20000088 	.word	0x20000088
 80008f0:	20000098 	.word	0x20000098
 80008f4:	20000094 	.word	0x20000094

080008f8 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
    if(index >= NO_OF_BUTTONS) return 0;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d901      	bls.n	800090c <is_button_pressed+0x14>
 8000908:	2300      	movs	r3, #0
 800090a:	e007      	b.n	800091c <is_button_pressed+0x24>
    return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4a06      	ldr	r2, [pc, #24]	; (8000928 <is_button_pressed+0x30>)
 8000910:	5cd3      	ldrb	r3, [r2, r3]
 8000912:	2b00      	cmp	r3, #0
 8000914:	bf0c      	ite	eq
 8000916:	2301      	moveq	r3, #1
 8000918:	2300      	movne	r3, #0
 800091a:	b2db      	uxtb	r3, r3
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000088 	.word	0x20000088

0800092c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
    if(index >= NO_OF_BUTTONS) return 0xff;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d901      	bls.n	8000940 <is_button_pressed_1s+0x14>
 800093c:	23ff      	movs	r3, #255	; 0xff
 800093e:	e007      	b.n	8000950 <is_button_pressed_1s+0x24>
    return (flagForButtonPress1s[index] == 1);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <is_button_pressed_1s+0x30>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	2b01      	cmp	r3, #1
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000094 	.word	0x20000094

08000960 <display7SEG_H>:
int led_buffer[4] = {0, 0, 0, 0};

// 0=ON, 1=OFF
static uint8_t seven_seg_code[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

void display7SEG_H(int num) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    uint8_t code = seven_seg_code[num];
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <display7SEG_H+0xb0>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(a_h_GPIO_Port, a_h_Pin, (code >> 0) & 0x01);
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	2101      	movs	r1, #1
 800097e:	4825      	ldr	r0, [pc, #148]	; (8000a14 <display7SEG_H+0xb4>)
 8000980:	f000 ff2d 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_h_GPIO_Port, b_h_Pin, (code >> 1) & 0x01);
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	085b      	lsrs	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	2102      	movs	r1, #2
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <display7SEG_H+0xb4>)
 8000996:	f000 ff22 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_h_GPIO_Port, c_h_Pin, (code >> 2) & 0x01);
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2104      	movs	r1, #4
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <display7SEG_H+0xb4>)
 80009ac:	f000 ff17 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_h_GPIO_Port, d_h_Pin, (code >> 3) & 0x01);
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	2108      	movs	r1, #8
 80009c0:	4814      	ldr	r0, [pc, #80]	; (8000a14 <display7SEG_H+0xb4>)
 80009c2:	f000 ff0c 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_h_GPIO_Port, e_h_Pin, (code >> 4) & 0x01);
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	2110      	movs	r1, #16
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <display7SEG_H+0xb4>)
 80009d8:	f000 ff01 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_h_GPIO_Port, f_h_Pin, (code >> 5) & 0x01);
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	461a      	mov	r2, r3
 80009ea:	2120      	movs	r1, #32
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <display7SEG_H+0xb4>)
 80009ee:	f000 fef6 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_h_GPIO_Port, g_h_Pin, (code >> 6) & 0x01);
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	099b      	lsrs	r3, r3, #6
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	4804      	ldr	r0, [pc, #16]	; (8000a14 <display7SEG_H+0xb4>)
 8000a04:	f000 feeb 	bl	80017de <HAL_GPIO_WritePin>
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000030 	.word	0x20000030
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <display7SEG_V>:

void display7SEG_V(int num) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    uint8_t code = seven_seg_code[num];
 8000a20:	4a2c      	ldr	r2, [pc, #176]	; (8000ad4 <display7SEG_V+0xbc>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(a_v_GPIO_Port, a_v_Pin, (code >> 0) & 0x01);
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	4828      	ldr	r0, [pc, #160]	; (8000ad8 <display7SEG_V+0xc0>)
 8000a38:	f000 fed1 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_v_GPIO_Port, b_v_Pin, (code >> 1) & 0x01);
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	085b      	lsrs	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	461a      	mov	r2, r3
 8000a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <display7SEG_V+0xc0>)
 8000a50:	f000 fec5 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_v_GPIO_Port, c_v_Pin, (code >> 2) & 0x01);
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <display7SEG_V+0xc0>)
 8000a68:	f000 feb9 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_v_GPIO_Port, d_v_Pin, (code >> 3) & 0x01);
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7e:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <display7SEG_V+0xc0>)
 8000a80:	f000 fead 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_v_GPIO_Port, e_v_Pin, (code >> 4) & 0x01);
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a96:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <display7SEG_V+0xc0>)
 8000a98:	f000 fea1 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_v_GPIO_Port, f_v_Pin, (code >> 5) & 0x01);
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <display7SEG_V+0xc0>)
 8000ab0:	f000 fe95 	bl	80017de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_v_GPIO_Port, g_v_Pin, (code >> 6) & 0x01);
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	099b      	lsrs	r3, r3, #6
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <display7SEG_V+0xc0>)
 8000ac8:	f000 fe89 	bl	80017de <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000030 	.word	0x20000030
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <scan7SEG>:

static int scan_stage = 0;

void scan7SEG() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    if (timer_7seg_scan_flag == 1) {
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <scan7SEG+0xb0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d14f      	bne.n	8000b88 <scan7SEG+0xac>
        setTimer_7seg_scan(100); // set led scan here
 8000ae8:	2064      	movs	r0, #100	; 0x64
 8000aea:	f000 fac5 	bl	8001078 <setTimer_7seg_scan>

        if (scan_stage == 0) {
 8000aee:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <scan7SEG+0xb4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d124      	bne.n	8000b40 <scan7SEG+0x64>
            HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afc:	4825      	ldr	r0, [pc, #148]	; (8000b94 <scan7SEG+0xb8>)
 8000afe:	f000 fe6e 	bl	80017de <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b08:	4822      	ldr	r0, [pc, #136]	; (8000b94 <scan7SEG+0xb8>)
 8000b0a:	f000 fe68 	bl	80017de <HAL_GPIO_WritePin>

            display7SEG_H(led_buffer[0]);
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <scan7SEG+0xbc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff24 	bl	8000960 <display7SEG_H>
            display7SEG_V(led_buffer[2]);
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <scan7SEG+0xbc>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff7b 	bl	8000a18 <display7SEG_V>

            HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	481b      	ldr	r0, [pc, #108]	; (8000b94 <scan7SEG+0xb8>)
 8000b28:	f000 fe59 	bl	80017de <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <scan7SEG+0xb8>)
 8000b34:	f000 fe53 	bl	80017de <HAL_GPIO_WritePin>

            scan_stage = 1;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <scan7SEG+0xb4>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, GPIO_PIN_RESET);

            scan_stage = 0;
        }
    }
}
 8000b3e:	e023      	b.n	8000b88 <scan7SEG+0xac>
            HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <scan7SEG+0xb8>)
 8000b46:	f000 fe4a 	bl	80017de <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b50:	4810      	ldr	r0, [pc, #64]	; (8000b94 <scan7SEG+0xb8>)
 8000b52:	f000 fe44 	bl	80017de <HAL_GPIO_WritePin>
            display7SEG_H(led_buffer[1]);
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <scan7SEG+0xbc>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff00 	bl	8000960 <display7SEG_H>
            display7SEG_V(led_buffer[3]);
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <scan7SEG+0xbc>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff57 	bl	8000a18 <display7SEG_V>
            HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <scan7SEG+0xb8>)
 8000b72:	f000 fe34 	bl	80017de <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <scan7SEG+0xb8>)
 8000b7e:	f000 fe2e 	bl	80017de <HAL_GPIO_WritePin>
            scan_stage = 0;
 8000b82:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <scan7SEG+0xb4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000c0 	.word	0x200000c0
 8000b90:	200000b0 	.word	0x200000b0
 8000b94:	40010800 	.word	0x40010800
 8000b98:	200000a0 	.word	0x200000a0

08000b9c <updateLedBuffer>:

void updateLedBuffer(int duration_h, int duration_v) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
    led_buffer[0] = duration_h / 10;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <updateLedBuffer+0x70>)
 8000baa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bae:	1092      	asrs	r2, r2, #2
 8000bb0:	17db      	asrs	r3, r3, #31
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <updateLedBuffer+0x74>)
 8000bb6:	6013      	str	r3, [r2, #0]
    led_buffer[1] = duration_h % 10;
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <updateLedBuffer+0x70>)
 8000bbc:	fb83 2301 	smull	r2, r3, r3, r1
 8000bc0:	109a      	asrs	r2, r3, #2
 8000bc2:	17cb      	asrs	r3, r1, #31
 8000bc4:	1ad2      	subs	r2, r2, r3
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	1aca      	subs	r2, r1, r3
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <updateLedBuffer+0x74>)
 8000bd2:	605a      	str	r2, [r3, #4]
    led_buffer[2] = duration_v / 10;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <updateLedBuffer+0x70>)
 8000bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bdc:	1092      	asrs	r2, r2, #2
 8000bde:	17db      	asrs	r3, r3, #31
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <updateLedBuffer+0x74>)
 8000be4:	6093      	str	r3, [r2, #8]
    led_buffer[3] = duration_v % 10;
 8000be6:	6839      	ldr	r1, [r7, #0]
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <updateLedBuffer+0x70>)
 8000bea:	fb83 2301 	smull	r2, r3, r3, r1
 8000bee:	109a      	asrs	r2, r3, #2
 8000bf0:	17cb      	asrs	r3, r1, #31
 8000bf2:	1ad2      	subs	r2, r2, r3
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	1aca      	subs	r2, r1, r3
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <updateLedBuffer+0x74>)
 8000c00:	60da      	str	r2, [r3, #12]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	66666667 	.word	0x66666667
 8000c10:	200000a0 	.word	0x200000a0

08000c14 <set_red_h>:

// Use to set traffic light state
void set_red_h(int state) { HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, !state); }
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf0c      	ite	eq
 8000c22:	2301      	moveq	r3, #1
 8000c24:	2300      	movne	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <set_red_h+0x28>)
 8000c2e:	f000 fdd6 	bl	80017de <HAL_GPIO_WritePin>
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40010800 	.word	0x40010800

08000c40 <set_yellow_h>:
void set_yellow_h(int state) { HAL_GPIO_WritePin(yellow_h_GPIO_Port, yellow_h_Pin, !state); }
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf0c      	ite	eq
 8000c4e:	2301      	moveq	r3, #1
 8000c50:	2300      	movne	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	2104      	movs	r1, #4
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <set_yellow_h+0x28>)
 8000c5a:	f000 fdc0 	bl	80017de <HAL_GPIO_WritePin>
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010800 	.word	0x40010800

08000c6c <set_green_h>:
void set_green_h(int state) { HAL_GPIO_WritePin(green_h_GPIO_Port, green_h_Pin, !state); }
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	2108      	movs	r1, #8
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <set_green_h+0x28>)
 8000c86:	f000 fdaa 	bl	80017de <HAL_GPIO_WritePin>
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010800 	.word	0x40010800

08000c98 <set_red_v>:

void set_red_v(int state) { HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, !state); }
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf0c      	ite	eq
 8000ca6:	2301      	moveq	r3, #1
 8000ca8:	2300      	movne	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <set_red_v+0x28>)
 8000cb2:	f000 fd94 	bl	80017de <HAL_GPIO_WritePin>
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40010800 	.word	0x40010800

08000cc4 <set_yellow_v>:
void set_yellow_v(int state) { HAL_GPIO_WritePin(yellow_v_GPIO_Port, yellow_v_Pin, !state); }
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	2300      	movne	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <set_yellow_v+0x28>)
 8000cde:	f000 fd7e 	bl	80017de <HAL_GPIO_WritePin>
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40010800 	.word	0x40010800

08000cf0 <set_green_v>:
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf0c      	ite	eq
 8000cfe:	2301      	moveq	r3, #1
 8000d00:	2300      	movne	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <set_green_v+0x28>)
 8000d0a:	f000 fd68 	bl	80017de <HAL_GPIO_WritePin>
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40010800 	.word	0x40010800

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000d20:	f000 fa5c 	bl	80011dc <HAL_Init>
  SystemClock_Config();
 8000d24:	f000 f80c 	bl	8000d40 <SystemClock_Config>
  MX_GPIO_Init();
 8000d28:	f000 f892 	bl	8000e50 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d2c:	f000 f844 	bl	8000db8 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <main+0x20>)
 8000d32:	f001 f999 	bl	8002068 <HAL_TIM_Base_Start_IT>

  while (1)
  {
	  fsm_for_input_processing();
 8000d36:	f7ff fa09 	bl	800014c <fsm_for_input_processing>
 8000d3a:	e7fc      	b.n	8000d36 <main+0x1a>
 8000d3c:	200000cc 	.word	0x200000cc

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b090      	sub	sp, #64	; 0x40
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	2228      	movs	r2, #40	; 0x28
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fd3a 	bl	80027c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d72:	f107 0318 	add.w	r3, r7, #24
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd4a 	bl	8001810 <HAL_RCC_OscConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d82:	f000 f8c9 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	230f      	movs	r3, #15
 8000d88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 ffb6 	bl	8001d10 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000daa:	f000 f8b5 	bl	8000f18 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3740      	adds	r7, #64	; 0x40
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000dde:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000de2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000dec:	2209      	movs	r2, #9
 8000dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfc:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000dfe:	f001 f8e3 	bl	8001fc8 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e08:	f000 f886 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000e1a:	f001 fa61 	bl	80022e0 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 f878 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_TIM2_Init+0x94>)
 8000e36:	f001 fc39 	bl	80026ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f86a 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200000cc 	.word	0x200000cc

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_GPIO_Init+0xbc>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red_h_Pin|yellow_h_Pin|green_h_Pin|red_v_Pin
 8000e94:	2200      	movs	r2, #0
 8000e96:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000e9a:	481d      	ldr	r0, [pc, #116]	; (8000f10 <MX_GPIO_Init+0xc0>)
 8000e9c:	f000 fc9f 	bl	80017de <HAL_GPIO_WritePin>
                          |yellow_v_Pin|green_v_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_h_Pin|b_h_Pin|c_h_Pin|d_v_Pin
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000ea6:	481b      	ldr	r0, [pc, #108]	; (8000f14 <MX_GPIO_Init+0xc4>)
 8000ea8:	f000 fc99 	bl	80017de <HAL_GPIO_WritePin>
                          |b_v_Pin|c_v_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red_h_Pin yellow_h_Pin green_h_Pin red_v_Pin
                           yellow_v_Pin green_v_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = red_h_Pin|yellow_h_Pin|green_h_Pin|red_v_Pin
 8000eac:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000eb0:	60bb      	str	r3, [r7, #8]
                          |yellow_v_Pin|green_v_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <MX_GPIO_Init+0xc0>)
 8000ec6:	f000 faf9 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : a_h_Pin b_h_Pin c_h_Pin d_v_Pin
                           e_v_Pin f_v_Pin g_v_Pin d_h_Pin
                           e_h_Pin f_h_Pin g_h_Pin a_v_Pin
                           b_v_Pin c_v_Pin */
  GPIO_InitStruct.Pin = a_h_Pin|b_h_Pin|c_h_Pin|d_v_Pin
 8000eca:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000ece:	60bb      	str	r3, [r7, #8]
                          |e_v_Pin|f_v_Pin|g_v_Pin|d_h_Pin
                          |e_h_Pin|f_h_Pin|g_h_Pin|a_v_Pin
                          |b_v_Pin|c_v_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_GPIO_Init+0xc4>)
 8000ee4:	f000 faea 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : sw0_Pin sw1_Pin sw2_Pin */
  GPIO_InitStruct.Pin = sw0_Pin|sw1_Pin|sw2_Pin;
 8000ee8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000eec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_GPIO_Init+0xc0>)
 8000efe:	f000 fadd 	bl	80014bc <HAL_GPIO_Init>

}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800
 8000f14:	40010c00 	.word	0x40010c00

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x5c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_MspInit+0x60>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_MspInit+0x60>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f98:	d113      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_TIM_Base_MspInit+0x44>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_TIM_Base_MspInit+0x44>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_TIM_Base_MspInit+0x44>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	201c      	movs	r0, #28
 8000fb8:	f000 fa49 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fbc:	201c      	movs	r0, #28
 8000fbe:	f000 fa62 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001016:	f000 f927 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM2_IRQHandler+0x10>)
 8001026:	f001 f86b 	bl	8002100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000cc 	.word	0x200000cc

08001034 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <setTimer_TrafficLight>:
int timer_7seg_scan_flag = 0;

int timer_blink_counter = 0;
int timer_blink_flag = 0;

void setTimer_TrafficLight(int duration) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    timer_traffic_light_counter = duration / 10;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <setTimer_TrafficLight+0x2c>)
 800104c:	fb82 1203 	smull	r1, r2, r2, r3
 8001050:	1092      	asrs	r2, r2, #2
 8001052:	17db      	asrs	r3, r3, #31
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <setTimer_TrafficLight+0x30>)
 8001058:	6013      	str	r3, [r2, #0]
    timer_traffic_light_flag = 0;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <setTimer_TrafficLight+0x34>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	66666667 	.word	0x66666667
 8001070:	200000b4 	.word	0x200000b4
 8001074:	200000b8 	.word	0x200000b8

08001078 <setTimer_7seg_scan>:

void setTimer_7seg_scan(int duration) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    timer_7seg_scan_counter = duration / 10;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <setTimer_7seg_scan+0x2c>)
 8001084:	fb82 1203 	smull	r1, r2, r2, r3
 8001088:	1092      	asrs	r2, r2, #2
 800108a:	17db      	asrs	r3, r3, #31
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <setTimer_7seg_scan+0x30>)
 8001090:	6013      	str	r3, [r2, #0]
    timer_7seg_scan_flag = 0;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <setTimer_7seg_scan+0x34>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	66666667 	.word	0x66666667
 80010a8:	200000bc 	.word	0x200000bc
 80010ac:	200000c0 	.word	0x200000c0

080010b0 <setTimer_Blink>:

void setTimer_Blink(int duration) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    timer_blink_counter = duration / 10;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <setTimer_Blink+0x2c>)
 80010bc:	fb82 1203 	smull	r1, r2, r2, r3
 80010c0:	1092      	asrs	r2, r2, #2
 80010c2:	17db      	asrs	r3, r3, #31
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <setTimer_Blink+0x30>)
 80010c8:	6013      	str	r3, [r2, #0]
    timer_blink_flag = 0;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <setTimer_Blink+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	66666667 	.word	0x66666667
 80010e0:	200000c4 	.word	0x200000c4
 80010e4:	200000c8 	.word	0x200000c8

080010e8 <timer_run>:

void timer_run() {
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
    if (timer_traffic_light_counter > 0) {
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <timer_run+0x6c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	dd0b      	ble.n	800110c <timer_run+0x24>
        timer_traffic_light_counter--;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <timer_run+0x6c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <timer_run+0x6c>)
 80010fc:	6013      	str	r3, [r2, #0]
        if (timer_traffic_light_counter <= 0) {
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <timer_run+0x6c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	dc02      	bgt.n	800110c <timer_run+0x24>
            timer_traffic_light_flag = 1;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <timer_run+0x70>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer_7seg_scan_counter > 0) {
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <timer_run+0x74>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd0b      	ble.n	800112c <timer_run+0x44>
        timer_7seg_scan_counter--;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <timer_run+0x74>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <timer_run+0x74>)
 800111c:	6013      	str	r3, [r2, #0]
        if (timer_7seg_scan_counter <= 0) {
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <timer_run+0x74>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dc02      	bgt.n	800112c <timer_run+0x44>
            timer_7seg_scan_flag = 1;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <timer_run+0x78>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer_blink_counter > 0) {
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <timer_run+0x7c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dd0b      	ble.n	800114c <timer_run+0x64>
        timer_blink_counter--;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <timer_run+0x7c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <timer_run+0x7c>)
 800113c:	6013      	str	r3, [r2, #0]
        if (timer_blink_counter <= 0) {
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <timer_run+0x7c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	dc02      	bgt.n	800114c <timer_run+0x64>
            timer_blink_flag = 1;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <timer_run+0x80>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
        }
    }
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	200000b4 	.word	0x200000b4
 8001158:	200000b8 	.word	0x200000b8
 800115c:	200000bc 	.word	0x200000bc
 8001160:	200000c0 	.word	0x200000c0
 8001164:	200000c4 	.word	0x200000c4
 8001168:	200000c8 	.word	0x200000c8

0800116c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117c:	d103      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x1a>
        button_reading();
 800117e:	f7ff fb45 	bl	800080c <button_reading>
        timer_run();
 8001182:	f7ff ffb1 	bl	80010e8 <timer_run>
    }
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001190:	f7ff ff50 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011ac:	4c09      	ldr	r4, [pc, #36]	; (80011d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f001 fae1 	bl	8002780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011be:	f7ff fdad 	bl	8000d1c <main>
  bx lr
 80011c2:	4770      	bx	lr
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80011cc:	0800281c 	.word	0x0800281c
  ldr r2, =_sbss
 80011d0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80011d4:	20000118 	.word	0x20000118

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x28>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f923 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fe94 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f93b 	bl	80014a2 <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f903 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000003c 	.word	0x2000003c
 8001260:	20000044 	.word	0x20000044
 8001264:	20000040 	.word	0x20000040

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000044 	.word	0x20000044
 8001288:	20000114 	.word	0x20000114

0800128c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000114 	.word	0x20000114

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4906      	ldr	r1, [pc, #24]	; (8001338 <__NVIC_EnableIRQ+0x34>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff90 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff2d 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff42 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff90 	bl	8001390 <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5f 	bl	800133c <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff35 	bl	8001304 <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b08b      	sub	sp, #44	; 0x2c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e148      	b.n	8001762 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d0:	2201      	movs	r2, #1
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8137 	bne.w	800175c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4aa3      	ldr	r2, [pc, #652]	; (8001780 <HAL_GPIO_Init+0x2c4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d05e      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 80014f8:	4aa1      	ldr	r2, [pc, #644]	; (8001780 <HAL_GPIO_Init+0x2c4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d875      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 80014fe:	4aa1      	ldr	r2, [pc, #644]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d058      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001504:	4a9f      	ldr	r2, [pc, #636]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d86f      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800150a:	4a9f      	ldr	r2, [pc, #636]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d052      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001510:	4a9d      	ldr	r2, [pc, #628]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d869      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001516:	4a9d      	ldr	r2, [pc, #628]	; (800178c <HAL_GPIO_Init+0x2d0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04c      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 800151c:	4a9b      	ldr	r2, [pc, #620]	; (800178c <HAL_GPIO_Init+0x2d0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d863      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001522:	4a9b      	ldr	r2, [pc, #620]	; (8001790 <HAL_GPIO_Init+0x2d4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d046      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001528:	4a99      	ldr	r2, [pc, #612]	; (8001790 <HAL_GPIO_Init+0x2d4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d85d      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d82a      	bhi.n	8001588 <HAL_GPIO_Init+0xcc>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d859      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001536:	a201      	add	r2, pc, #4	; (adr r2, 800153c <HAL_GPIO_Init+0x80>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	080015b7 	.word	0x080015b7
 8001540:	08001591 	.word	0x08001591
 8001544:	080015a3 	.word	0x080015a3
 8001548:	080015e5 	.word	0x080015e5
 800154c:	080015eb 	.word	0x080015eb
 8001550:	080015eb 	.word	0x080015eb
 8001554:	080015eb 	.word	0x080015eb
 8001558:	080015eb 	.word	0x080015eb
 800155c:	080015eb 	.word	0x080015eb
 8001560:	080015eb 	.word	0x080015eb
 8001564:	080015eb 	.word	0x080015eb
 8001568:	080015eb 	.word	0x080015eb
 800156c:	080015eb 	.word	0x080015eb
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015eb 	.word	0x080015eb
 8001578:	080015eb 	.word	0x080015eb
 800157c:	080015eb 	.word	0x080015eb
 8001580:	08001599 	.word	0x08001599
 8001584:	080015ad 	.word	0x080015ad
 8001588:	4a82      	ldr	r2, [pc, #520]	; (8001794 <HAL_GPIO_Init+0x2d8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158e:	e02c      	b.n	80015ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e029      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e024      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	3308      	adds	r3, #8
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e01f      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e01a      	b.n	80015ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015be:	2304      	movs	r3, #4
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e013      	b.n	80015ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	611a      	str	r2, [r3, #16]
          break;
 80015d6:	e009      	b.n	80015ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	615a      	str	r2, [r3, #20]
          break;
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x130>
          break;
 80015ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2bff      	cmp	r3, #255	; 0xff
 80015f0:	d801      	bhi.n	80015f6 <HAL_GPIO_Init+0x13a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_Init+0x13e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3304      	adds	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d802      	bhi.n	8001608 <HAL_GPIO_Init+0x14c>
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x152>
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	3b08      	subs	r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	210f      	movs	r1, #15
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	6a39      	ldr	r1, [r7, #32]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8090 	beq.w	800175c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a55      	ldr	r2, [pc, #340]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001654:	4a51      	ldr	r2, [pc, #324]	; (800179c <HAL_GPIO_Init+0x2e0>)
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2e4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00d      	beq.n	800169c <HAL_GPIO_Init+0x1e0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_GPIO_Init+0x2e8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d007      	beq.n	8001698 <HAL_GPIO_Init+0x1dc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <HAL_GPIO_Init+0x2ec>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_GPIO_Init+0x1d8>
 8001690:	2302      	movs	r3, #2
 8001692:	e004      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 8001694:	2303      	movs	r3, #3
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 800169c:	2300      	movs	r3, #0
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	f002 0203 	and.w	r2, r2, #3
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	4093      	lsls	r3, r2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ae:	493b      	ldr	r1, [pc, #236]	; (800179c <HAL_GPIO_Init+0x2e0>)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	4937      	ldr	r1, [pc, #220]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d6:	4b35      	ldr	r3, [pc, #212]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4933      	ldr	r1, [pc, #204]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	492d      	ldr	r1, [pc, #180]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	4929      	ldr	r1, [pc, #164]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001708:	4013      	ands	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4923      	ldr	r1, [pc, #140]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	491f      	ldr	r1, [pc, #124]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001730:	4013      	ands	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4919      	ldr	r1, [pc, #100]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4915      	ldr	r1, [pc, #84]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001758:	4013      	ands	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	3301      	adds	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	fa22 f303 	lsr.w	r3, r2, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	f47f aeaf 	bne.w	80014d0 <HAL_GPIO_Init+0x14>
  }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	372c      	adds	r7, #44	; 0x2c
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	10320000 	.word	0x10320000
 8001784:	10310000 	.word	0x10310000
 8001788:	10220000 	.word	0x10220000
 800178c:	10210000 	.word	0x10210000
 8001790:	10120000 	.word	0x10120000
 8001794:	10110000 	.word	0x10110000
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]
 80017ea:	4613      	mov	r3, r2
 80017ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ee:	787b      	ldrb	r3, [r7, #1]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f4:	887a      	ldrh	r2, [r7, #2]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017fa:	e003      	b.n	8001804 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	041a      	lsls	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
	...

08001810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e26c      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8087 	beq.w	800193e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001830:	4b92      	ldr	r3, [pc, #584]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b04      	cmp	r3, #4
 800183a:	d00c      	beq.n	8001856 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183c:	4b8f      	ldr	r3, [pc, #572]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d112      	bne.n	800186e <HAL_RCC_OscConfig+0x5e>
 8001848:	4b8c      	ldr	r3, [pc, #560]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d10b      	bne.n	800186e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001856:	4b89      	ldr	r3, [pc, #548]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d06c      	beq.n	800193c <HAL_RCC_OscConfig+0x12c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d168      	bne.n	800193c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e246      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x76>
 8001878:	4b80      	ldr	r3, [pc, #512]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a7f      	ldr	r2, [pc, #508]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e02e      	b.n	80018e4 <HAL_RCC_OscConfig+0xd4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x98>
 800188e:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a7a      	ldr	r2, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a77      	ldr	r2, [pc, #476]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xd4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0xbc>
 80018b2:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a71      	ldr	r2, [pc, #452]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xd4>
 80018cc:	4b6b      	ldr	r3, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a67      	ldr	r2, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fcce 	bl	800128c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fcca 	bl	800128c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1fa      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xe4>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fcba 	bl	800128c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fcb6 	bl	800128c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1e6      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x10c>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194a:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x18c>
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x176>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1ba      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4939      	ldr	r1, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fc6f 	bl	800128c <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fc6b 	bl	800128c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e19b      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4927      	ldr	r1, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fc4e 	bl	800128c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff fc4a 	bl	800128c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e17a      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d03a      	beq.n	8001a94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d019      	beq.n	8001a5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_RCC_OscConfig+0x274>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fc2e 	bl	800128c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc2a 	bl	800128c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e15a      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f000 fa9a 	bl	8001f8c <RCC_Delay>
 8001a58:	e01c      	b.n	8001a94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a60:	f7ff fc14 	bl	800128c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a66:	e00f      	b.n	8001a88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fc10 	bl	800128c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d908      	bls.n	8001a88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e140      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	42420000 	.word	0x42420000
 8001a84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	4b9e      	ldr	r3, [pc, #632]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1e9      	bne.n	8001a68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a6 	beq.w	8001bee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa6:	4b97      	ldr	r3, [pc, #604]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10d      	bne.n	8001ace <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a93      	ldr	r2, [pc, #588]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b91      	ldr	r3, [pc, #580]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b8e      	ldr	r3, [pc, #568]	; (8001d08 <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b8b      	ldr	r3, [pc, #556]	; (8001d08 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a8a      	ldr	r2, [pc, #552]	; (8001d08 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fbd1 	bl	800128c <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7ff fbcd 	bl	800128c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b64      	cmp	r3, #100	; 0x64
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0fd      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x312>
 8001b14:	4b7b      	ldr	r3, [pc, #492]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a7a      	ldr	r2, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	e02d      	b.n	8001b7e <HAL_RCC_OscConfig+0x36e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x334>
 8001b2a:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a75      	ldr	r2, [pc, #468]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	4b73      	ldr	r3, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a72      	ldr	r2, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6213      	str	r3, [r2, #32]
 8001b42:	e01c      	b.n	8001b7e <HAL_RCC_OscConfig+0x36e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x356>
 8001b4c:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a6c      	ldr	r2, [pc, #432]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a69      	ldr	r2, [pc, #420]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x36e>
 8001b66:	4b67      	ldr	r3, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a66      	ldr	r2, [pc, #408]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a63      	ldr	r2, [pc, #396]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7ff fb81 	bl	800128c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff fb7d 	bl	800128c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0ab      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ee      	beq.n	8001b8e <HAL_RCC_OscConfig+0x37e>
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fb6b 	bl	800128c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff fb67 	bl	800128c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e095      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ee      	bne.n	8001bba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8081 	beq.w	8001cfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf8:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d061      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d146      	bne.n	8001c9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0x4fc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb3b 	bl	800128c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff fb37 	bl	800128c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e067      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d108      	bne.n	8001c54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	492d      	ldr	r1, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a19      	ldr	r1, [r3, #32]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	430b      	orrs	r3, r1
 8001c66:	4927      	ldr	r1, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_OscConfig+0x4fc>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fb0b 	bl	800128c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff fb07 	bl	800128c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e037      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x46a>
 8001c98:	e02f      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <HAL_RCC_OscConfig+0x4fc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff faf4 	bl	800128c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff faf0 	bl	800128c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e020      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x498>
 8001cc6:	e018      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e013      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	42420060 	.word	0x42420060

08001d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0d0      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4965      	ldr	r1, [pc, #404]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b8      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	494d      	ldr	r1, [pc, #308]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d040      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e073      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4936      	ldr	r1, [pc, #216]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff fa44 	bl	800128c <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff fa40 	bl	800128c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e053      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d210      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e032      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e9e:	f000 f821 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	5ccb      	ldrb	r3, [r1, r3]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1cc>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f9a2 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	080027f0 	.word	0x080027f0
 8001edc:	2000003c 	.word	0x2000003c
 8001ee0:	20000040 	.word	0x20000040

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x30>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x36>
 8001f12:	e027      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f16:	613b      	str	r3, [r7, #16]
      break;
 8001f18:	e027      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	0c9b      	lsrs	r3, r3, #18
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d010      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	0c5b      	lsrs	r3, r3, #17
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f46:	fb02 f203 	mul.w	r2, r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e004      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	613b      	str	r3, [r7, #16]
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f66:	613b      	str	r3, [r7, #16]
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	693b      	ldr	r3, [r7, #16]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	007a1200 	.word	0x007a1200
 8001f80:	08002800 	.word	0x08002800
 8001f84:	08002810 	.word	0x08002810
 8001f88:	003d0900 	.word	0x003d0900

08001f8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <RCC_Delay+0x34>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <RCC_Delay+0x38>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0a5b      	lsrs	r3, r3, #9
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa8:	bf00      	nop
  }
  while (Delay --);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	60fa      	str	r2, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f9      	bne.n	8001fa8 <RCC_Delay+0x1c>
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	2000003c 	.word	0x2000003c
 8001fc4:	10624dd3 	.word	0x10624dd3

08001fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e041      	b.n	800205e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe ffca 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f000 fa56 	bl	80024b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e035      	b.n	80020ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_TIM_Base_Start_IT+0x90>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_TIM_Base_Start_IT+0x4e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d004      	beq.n	80020b6 <HAL_TIM_Base_Start_IT+0x4e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_TIM_Base_Start_IT+0x94>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d111      	bne.n	80020da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d010      	beq.n	80020ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d8:	e007      	b.n	80020ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40000400 	.word	0x40000400

08002100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d020      	beq.n	8002164 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0202 	mvn.w	r2, #2
 8002134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f998 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f98b 	bl	800246e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f99a 	bl	8002492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d020      	beq.n	80021b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0204 	mvn.w	r2, #4
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f972 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f965 	bl	800246e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f974 	bl	8002492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d020      	beq.n	80021fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01b      	beq.n	80021fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0208 	mvn.w	r2, #8
 80021cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2204      	movs	r2, #4
 80021d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f94c 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f93f 	bl	800246e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f94e 	bl	8002492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d020      	beq.n	8002248 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01b      	beq.n	8002248 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0210 	mvn.w	r2, #16
 8002218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2208      	movs	r2, #8
 800221e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f926 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f919 	bl	800246e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f928 	bl	8002492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00c      	beq.n	800226c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0201 	mvn.w	r2, #1
 8002264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe ff80 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa6f 	bl	800276e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00c      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8f8 	bl	80024a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00c      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0220 	mvn.w	r2, #32
 80022d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa42 	bl	800275c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_TIM_ConfigClockSource+0x1c>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0b4      	b.n	8002466 <HAL_TIM_ConfigClockSource+0x186>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800231a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002334:	d03e      	beq.n	80023b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233a:	f200 8087 	bhi.w	800244c <HAL_TIM_ConfigClockSource+0x16c>
 800233e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002342:	f000 8086 	beq.w	8002452 <HAL_TIM_ConfigClockSource+0x172>
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	d87f      	bhi.n	800244c <HAL_TIM_ConfigClockSource+0x16c>
 800234c:	2b70      	cmp	r3, #112	; 0x70
 800234e:	d01a      	beq.n	8002386 <HAL_TIM_ConfigClockSource+0xa6>
 8002350:	2b70      	cmp	r3, #112	; 0x70
 8002352:	d87b      	bhi.n	800244c <HAL_TIM_ConfigClockSource+0x16c>
 8002354:	2b60      	cmp	r3, #96	; 0x60
 8002356:	d050      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x11a>
 8002358:	2b60      	cmp	r3, #96	; 0x60
 800235a:	d877      	bhi.n	800244c <HAL_TIM_ConfigClockSource+0x16c>
 800235c:	2b50      	cmp	r3, #80	; 0x50
 800235e:	d03c      	beq.n	80023da <HAL_TIM_ConfigClockSource+0xfa>
 8002360:	2b50      	cmp	r3, #80	; 0x50
 8002362:	d873      	bhi.n	800244c <HAL_TIM_ConfigClockSource+0x16c>
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d058      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x13a>
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d86f      	bhi.n	800244c <HAL_TIM_ConfigClockSource+0x16c>
 800236c:	2b30      	cmp	r3, #48	; 0x30
 800236e:	d064      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x15a>
 8002370:	2b30      	cmp	r3, #48	; 0x30
 8002372:	d86b      	bhi.n	800244c <HAL_TIM_ConfigClockSource+0x16c>
 8002374:	2b20      	cmp	r3, #32
 8002376:	d060      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x15a>
 8002378:	2b20      	cmp	r3, #32
 800237a:	d867      	bhi.n	800244c <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b00      	cmp	r3, #0
 800237e:	d05c      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x15a>
 8002380:	2b10      	cmp	r3, #16
 8002382:	d05a      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x15a>
 8002384:	e062      	b.n	800244c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6899      	ldr	r1, [r3, #8]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f000 f96a 	bl	800266e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	609a      	str	r2, [r3, #8]
      break;
 80023b2:	e04f      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6899      	ldr	r1, [r3, #8]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f000 f953 	bl	800266e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d6:	609a      	str	r2, [r3, #8]
      break;
 80023d8:	e03c      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f000 f8ca 	bl	8002580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2150      	movs	r1, #80	; 0x50
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f921 	bl	800263a <TIM_ITRx_SetConfig>
      break;
 80023f8:	e02c      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	461a      	mov	r2, r3
 8002408:	f000 f8e8 	bl	80025dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2160      	movs	r1, #96	; 0x60
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f911 	bl	800263a <TIM_ITRx_SetConfig>
      break;
 8002418:	e01c      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	461a      	mov	r2, r3
 8002428:	f000 f8aa 	bl	8002580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2140      	movs	r1, #64	; 0x40
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f901 	bl	800263a <TIM_ITRx_SetConfig>
      break;
 8002438:	e00c      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4619      	mov	r1, r3
 8002444:	4610      	mov	r0, r2
 8002446:	f000 f8f8 	bl	800263a <TIM_ITRx_SetConfig>
      break;
 800244a:	e003      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      break;
 8002450:	e000      	b.n	8002454 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a2b      	ldr	r2, [pc, #172]	; (8002578 <TIM_Base_SetConfig+0xc0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <TIM_Base_SetConfig+0x28>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d6:	d003      	beq.n	80024e0 <TIM_Base_SetConfig+0x28>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a28      	ldr	r2, [pc, #160]	; (800257c <TIM_Base_SetConfig+0xc4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d108      	bne.n	80024f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a20      	ldr	r2, [pc, #128]	; (8002578 <TIM_Base_SetConfig+0xc0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <TIM_Base_SetConfig+0x52>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002500:	d003      	beq.n	800250a <TIM_Base_SetConfig+0x52>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1d      	ldr	r2, [pc, #116]	; (800257c <TIM_Base_SetConfig+0xc4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d108      	bne.n	800251c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <TIM_Base_SetConfig+0xc0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f023 0201 	bic.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]
  }
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400

08002580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f023 0201 	bic.w	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f023 030a 	bic.w	r3, r3, #10
 80025bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	621a      	str	r2, [r3, #32]
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f023 0210 	bic.w	r2, r3, #16
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	031b      	lsls	r3, r3, #12
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002618:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	621a      	str	r2, [r3, #32]
}
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	f043 0307 	orr.w	r3, r3, #7
 800265c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266e:	b480      	push	{r7}
 8002670:	b087      	sub	sp, #28
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002688:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	021a      	lsls	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	431a      	orrs	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	4313      	orrs	r3, r2
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	609a      	str	r2, [r3, #8]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e041      	b.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a14      	ldr	r2, [pc, #80]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002710:	d004      	beq.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a10      	ldr	r2, [pc, #64]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d10c      	bne.n	8002736 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002722:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	4313      	orrs	r3, r2
 800272c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40000400 	.word	0x40000400

0800275c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <__libc_init_array>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	2600      	movs	r6, #0
 8002784:	4d0c      	ldr	r5, [pc, #48]	; (80027b8 <__libc_init_array+0x38>)
 8002786:	4c0d      	ldr	r4, [pc, #52]	; (80027bc <__libc_init_array+0x3c>)
 8002788:	1b64      	subs	r4, r4, r5
 800278a:	10a4      	asrs	r4, r4, #2
 800278c:	42a6      	cmp	r6, r4
 800278e:	d109      	bne.n	80027a4 <__libc_init_array+0x24>
 8002790:	f000 f822 	bl	80027d8 <_init>
 8002794:	2600      	movs	r6, #0
 8002796:	4d0a      	ldr	r5, [pc, #40]	; (80027c0 <__libc_init_array+0x40>)
 8002798:	4c0a      	ldr	r4, [pc, #40]	; (80027c4 <__libc_init_array+0x44>)
 800279a:	1b64      	subs	r4, r4, r5
 800279c:	10a4      	asrs	r4, r4, #2
 800279e:	42a6      	cmp	r6, r4
 80027a0:	d105      	bne.n	80027ae <__libc_init_array+0x2e>
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a8:	4798      	blx	r3
 80027aa:	3601      	adds	r6, #1
 80027ac:	e7ee      	b.n	800278c <__libc_init_array+0xc>
 80027ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b2:	4798      	blx	r3
 80027b4:	3601      	adds	r6, #1
 80027b6:	e7f2      	b.n	800279e <__libc_init_array+0x1e>
 80027b8:	08002814 	.word	0x08002814
 80027bc:	08002814 	.word	0x08002814
 80027c0:	08002814 	.word	0x08002814
 80027c4:	08002818 	.word	0x08002818

080027c8 <memset>:
 80027c8:	4603      	mov	r3, r0
 80027ca:	4402      	add	r2, r0
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d100      	bne.n	80027d2 <memset+0xa>
 80027d0:	4770      	bx	lr
 80027d2:	f803 1b01 	strb.w	r1, [r3], #1
 80027d6:	e7f9      	b.n	80027cc <memset+0x4>

080027d8 <_init>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr

080027e4 <_fini>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	bf00      	nop
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr
